```
#lang play

#|
<WAE> ::=    <num> | <bool>
          | (+ <WAE> <WAE>)
          | (- <WAE> <WAE>)
          | (if-tf <WAE> <WAE> <WAE>)
          | <id>
          | (with <id> <WAE> <WAE>)
|#
(deftype Expr
  [num n]
  [bool b]
  [add l r]
  [sub l r]
  [if-tf c et ef]
  [with id-name named-expr body-expr]
  [id name]
  )

; <fundef> := {define {<id> <id>} <expr>}
; aqui no haremos el parser, sino solo el deftype
(deftype Fundef
  (fundef fname arg body)
  )

; parse: Src -> Expr
; parsea codigo fuente
(define (parse src)
  (match src
    [(? number?) (num src)]
    [(? boolean?) (bool src)]
    [(? symbol?) (id src)]
    [(list '+ s1 s2) (add (parse s1) (parse s2))]
    [(list '- s1 s2) (sub (parse s1) (parse s2))]
    [(list 'if-tf c et ef) (if-tf (parse c) (parse et) (parse ef))]
    [(list 'with (list x e) b) (with x (parse e) (parse b))]
    )
  )



;subst :: id expr expr -> expr
;substituir x por v en e
(define (subst x v e)
  (match e
    [(num n) e]
    [(bool b) e]
    [(id sym) (if (eq? x sym) v e)]
    [(add l r) (add (subst x v l) (subst x v r))]
    [(sub l r) (sub (subst x v l) (subst x v r))]
    [(if-tf c et ef) (if-tf (subst x v c) (subst x v et) (subst x v ef))]
    [(with id ne b)
     (with id (subst x v ne)
           (if (eq? x id)
               b
               (subst x v b)
               ))]
   )
 )


; interp :: Expr List(fundefs) -> val

(define (interp expr)
  (match expr
    [(num n) n]
    [(bool b) b]
    [(id x) (error "undefined: " x)]
    [(add l r) (+ (interp l) (interp r))]
    [(sub l r) (- (interp l) (interp r))]
    [(if-tf c et ef) (if (interp c)
                         (interp et)
                         (interp ef))]
    [(with x e b) ; {with {x e} b}
     (interp (subst x (parse (interp e)) b))]
))


; run: Src list<fundef>? -> Expr
; corre un programa
(define (run prog)
  (interp (parse prog))
  )

(test (run '{+ 3 4}) 7)
(test (run '{- 5 1}) 4)

(test (run '{with {x 3} 2}) 2)
(test (run '{with {x 3} x}) 3)
(test (run '{with {x 3} {with {y 4} x}}) 3)
(test (run '{with {x 3} {+ x 4}}) 7)
(test (run '{with {x 3} {with {x 10} {+ x x}}}) 20)
(test (run '{with {x 3} {with {x x} {+ x x}}}) 6)
(test (run '{with {x 3} {with {y 2} {+ x y}}}) 5)
(test (run '{with {x 3} {+ 1 {with {y 2} {+ x y}}}}) 6)
(test (run '{with {x 3} {with {y {+ 2 x}} {+ x y}}}) 8)
(test (run '{with {x 3} {if-tf {+ x 1} {+ x 3} {+ x 9}}}) 6)

```